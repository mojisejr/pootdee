/**
 * UI Transformation Utilities
 * 
 * This file contains utility functions to transform technical data
 * into user-friendly Thai representations for better UX.
 */

/**
 * Transform IPA phonetic notation to Thai pronunciation guide
 * @param ipaNotation - International Phonetic Alphabet notation
 * @param syllables - Array of syllables
 * @param stress - Array of stress patterns
 * @returns Thai pronunciation guide with stress indicators
 */
export function transformPhoneticToThai(
  ipaNotation: string,
  syllables: string[],
  stress: number[]
): string {
  // Basic IPA to Thai approximation mapping
  const ipaToThaiMap: Record<string, string> = {
    // Vowels
    '…™': '‡∏≠‡∏¥',
    'i:': '‡∏≠‡∏µ',
    '…õ': '‡πÄ‡∏≠',
    '√¶': '‡πÅ‡∏≠',
    ' å': '‡∏≠‡∏∞',
    '…ë:': '‡∏≠‡∏≤',
    '…í': '‡∏≠‡πá‡∏≠',
    '…î:': '‡∏≠‡∏≠',
    ' ä': '‡∏≠‡∏∏',
    'u:': '‡∏≠‡∏π',
    '…ô': '‡πÄ‡∏≠‡∏≠',
    '…ú:': '‡πÄ‡∏≠‡∏≠',
    'e…™': '‡πÄ‡∏≠',
    'a…™': '‡πÑ‡∏≠',
    '…î…™': '‡∏≠‡∏≠‡∏¢',
    'a ä': '‡πÄ‡∏≠‡∏≤',
    '…ô ä': '‡πÇ‡∏≠',
    '…™…ô': '‡πÄ‡∏≠‡∏µ‡∏¢',
    'e…ô': '‡πÅ‡∏≠‡∏£‡πå',
    ' ä…ô': '‡∏≠‡∏±‡∏ß‡∏£‡πå',
    
    // Consonants
    'p': '‡∏õ',
    'b': '‡∏ö',
    't': '‡∏ï',
    'd': '‡∏î',
    'k': '‡∏Å',
    'g': '‡∏Å',
    'f': '‡∏ü',
    'v': '‡∏ß',
    'Œ∏': '‡∏ò',
    '√∞': '‡∏î',
    's': '‡∏™',
    'z': '‡∏ã',
    ' É': '‡∏ä',
    ' í': '‡∏ä',
    'h': '‡∏´',
    'm': '‡∏°',
    'n': '‡∏ô',
    '≈ã': '‡∏á',
    'l': '‡∏•',
    'r': '‡∏£',
    'w': '‡∏ß',
    'j': '‡∏¢',
    't É': '‡∏ä',
    'd í': '‡∏à'
  };

  // Transform IPA notation to Thai approximation
  let thaiPronunciation = ipaNotation;
  
  // Replace IPA symbols with Thai equivalents
  Object.entries(ipaToThaiMap).forEach(([ipa, thai]) => {
    thaiPronunciation = thaiPronunciation.replace(new RegExp(ipa, 'g'), thai);
  });

  // Clean up any remaining IPA symbols
  thaiPronunciation = thaiPronunciation
    .replace(/[ÀàÀå]/g, '') // Remove stress markers
    .replace(/[Àê]/g, '') // Remove length markers
    .replace(/[()]/g, '') // Remove parentheses
    .trim();

  // If transformation didn't work well, use syllables as fallback
  if (thaiPronunciation === ipaNotation || thaiPronunciation.length < 2) {
    thaiPronunciation = syllables.join('-');
  }

  // Add stress indicators using Thai formatting
  if (stress.length > 0 && syllables.length > 0) {
    const stressedSyllables = syllables.map((syllable, index) => {
      const isStressed = stress[index] === 1;
      return isStressed ? `**${syllable}**` : syllable;
    });
    
    return `${thaiPronunciation} (${stressedSyllables.join('-')})`;
  }

  return thaiPronunciation;
}

/**
 * Transform technical difficulty levels to user-friendly Thai descriptions
 */
export function transformDifficultyToThai(difficulty: "easy" | "medium" | "hard"): string {
  const difficultyMap: Record<string, string> = {
    easy: "‡∏á‡πà‡∏≤‡∏¢",
    medium: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", 
    hard: "‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢"
  };
  
  return difficultyMap[difficulty] || difficulty;
}

/**
 * Transform vocabulary level to Thai description
 */
export function transformVocabularyLevelToThai(level: "beginner" | "intermediate" | "advanced"): string {
  const levelMap: Record<string, string> = {
    beginner: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
    intermediate: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
    advanced: "‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"
  };
  
  return levelMap[level] || level;
}

/**
 * Transform grammar complexity to Thai description
 */
export function transformComplexityToThai(complexity: "simple" | "medium" | "complex"): string {
  const complexityMap: Record<string, string> = {
    simple: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢",
    medium: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
    complex: "‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô"
  };
  
  return complexityMap[complexity] || complexity;
}

/**
 * Transform appropriateness level to Thai description
 */
export function transformAppropriatenessToThai(appropriateness: "formal" | "informal" | "neutral"): string {
  const appropriatenessMap: Record<string, string> = {
    formal: "‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£",
    informal: "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£",
    neutral: "‡∏Å‡∏•‡∏≤‡∏á‡πÜ"
  };
  
  return appropriatenessMap[appropriateness] || appropriateness;
}

/**
 * Get encouraging tone for correctness status
 */
export function getEncouragingTone(correctness: "correct" | "incorrect" | "partially_correct"): {
  icon: string;
  message: string;
  color: string;
} {
  const toneMap = {
    correct: {
      icon: "üéâ",
      message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÅ‡∏õ‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
      color: "text-green-600"
    },
    partially_correct: {
      icon: "üëç",
      message: "‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
      color: "text-yellow-600"
    },
    incorrect: {
      icon: "üí™",
      message: "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£! ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠",
      color: "text-blue-600"
    }
  };
  
  return toneMap[correctness];
}

/**
 * Get encouraging message for star rating
 */
export function getStarRatingMessage(rating: number): string {
  if (rating >= 4.5) return "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! üåü";
  if (rating >= 3.5) return "‡∏î‡∏µ‡∏°‡∏≤‡∏Å! üëè";
  if (rating >= 2.5) return "‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß! üëç";
  if (rating >= 1.5) return "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ! üí™";
  return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà! üå±";
}